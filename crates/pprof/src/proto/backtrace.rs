// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `backtrace.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:hala.pprof.Symbol)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Symbol {
    // message fields
    // @@protoc_insertion_point(field:hala.pprof.Symbol.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:hala.pprof.Symbol.address)
    pub address: u64,
    // @@protoc_insertion_point(field:hala.pprof.Symbol.file_name)
    pub file_name: ::std::string::String,
    // @@protoc_insertion_point(field:hala.pprof.Symbol.line_no)
    pub line_no: u32,
    // @@protoc_insertion_point(field:hala.pprof.Symbol.col_no)
    pub col_no: u32,
    // special fields
    // @@protoc_insertion_point(special_field:hala.pprof.Symbol.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Symbol {
    fn default() -> &'a Symbol {
        <Symbol as ::protobuf::Message>::default_instance()
    }
}

impl Symbol {
    pub fn new() -> Symbol {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Symbol| { &m.name },
            |m: &mut Symbol| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &Symbol| { &m.address },
            |m: &mut Symbol| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file_name",
            |m: &Symbol| { &m.file_name },
            |m: &mut Symbol| { &mut m.file_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "line_no",
            |m: &Symbol| { &m.line_no },
            |m: &mut Symbol| { &mut m.line_no },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "col_no",
            |m: &Symbol| { &m.col_no },
            |m: &mut Symbol| { &mut m.col_no },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Symbol>(
            "Symbol",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Symbol {
    const NAME: &'static str = "Symbol";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.address = is.read_uint64()?;
                },
                26 => {
                    self.file_name = is.read_string()?;
                },
                32 => {
                    self.line_no = is.read_uint32()?;
                },
                40 => {
                    self.col_no = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.address != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.address);
        }
        if !self.file_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.file_name);
        }
        if self.line_no != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.line_no);
        }
        if self.col_no != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.col_no);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.address != 0 {
            os.write_uint64(2, self.address)?;
        }
        if !self.file_name.is_empty() {
            os.write_string(3, &self.file_name)?;
        }
        if self.line_no != 0 {
            os.write_uint32(4, self.line_no)?;
        }
        if self.col_no != 0 {
            os.write_uint32(5, self.col_no)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Symbol {
        Symbol::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.address = 0;
        self.file_name.clear();
        self.line_no = 0;
        self.col_no = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Symbol {
        static instance: Symbol = Symbol {
            name: ::std::string::String::new(),
            address: 0,
            file_name: ::std::string::String::new(),
            line_no: 0,
            col_no: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Symbol {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Symbol").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Symbol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Symbol {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hala.pprof.HeapBacktrace)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HeapBacktrace {
    // message fields
    // @@protoc_insertion_point(field:hala.pprof.HeapBacktrace.address)
    pub address: u64,
    // @@protoc_insertion_point(field:hala.pprof.HeapBacktrace.size)
    pub size: u64,
    // @@protoc_insertion_point(field:hala.pprof.HeapBacktrace.frame_symbols)
    pub frame_symbols: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:hala.pprof.HeapBacktrace.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HeapBacktrace {
    fn default() -> &'a HeapBacktrace {
        <HeapBacktrace as ::protobuf::Message>::default_instance()
    }
}

impl HeapBacktrace {
    pub fn new() -> HeapBacktrace {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &HeapBacktrace| { &m.address },
            |m: &mut HeapBacktrace| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "size",
            |m: &HeapBacktrace| { &m.size },
            |m: &mut HeapBacktrace| { &mut m.size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "frame_symbols",
            |m: &HeapBacktrace| { &m.frame_symbols },
            |m: &mut HeapBacktrace| { &mut m.frame_symbols },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HeapBacktrace>(
            "HeapBacktrace",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HeapBacktrace {
    const NAME: &'static str = "HeapBacktrace";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.address = is.read_uint64()?;
                },
                16 => {
                    self.size = is.read_uint64()?;
                },
                26 => {
                    is.read_repeated_packed_uint64_into(&mut self.frame_symbols)?;
                },
                24 => {
                    self.frame_symbols.push(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.address != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.address);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.size);
        }
        for value in &self.frame_symbols {
            my_size += ::protobuf::rt::uint64_size(3, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.address != 0 {
            os.write_uint64(1, self.address)?;
        }
        if self.size != 0 {
            os.write_uint64(2, self.size)?;
        }
        for v in &self.frame_symbols {
            os.write_uint64(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HeapBacktrace {
        HeapBacktrace::new()
    }

    fn clear(&mut self) {
        self.address = 0;
        self.size = 0;
        self.frame_symbols.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HeapBacktrace {
        static instance: HeapBacktrace = HeapBacktrace {
            address: 0,
            size: 0,
            frame_symbols: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HeapBacktrace {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HeapBacktrace").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HeapBacktrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeapBacktrace {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fbacktrace.proto\x12\nhala.pprof\"\x83\x01\n\x06Symbol\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12\x18\n\x07address\x18\x02\x20\
    \x01(\x04R\x07address\x12\x1b\n\tfile_name\x18\x03\x20\x01(\tR\x08fileNa\
    me\x12\x17\n\x07line_no\x18\x04\x20\x01(\rR\x06lineNo\x12\x15\n\x06col_n\
    o\x18\x05\x20\x01(\rR\x05colNo\"b\n\rHeapBacktrace\x12\x18\n\x07address\
    \x18\x01\x20\x01(\x04R\x07address\x12\x12\n\x04size\x18\x02\x20\x01(\x04\
    R\x04size\x12#\n\rframe_symbols\x18\x03\x20\x03(\x04R\x0cframeSymbolsb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Symbol::generated_message_descriptor_data());
            messages.push(HeapBacktrace::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
